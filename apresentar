# Projeto: Análise Recife

Este arquivo apresenta a estrutura do projeto, as funções utilizadas para análise de dados, e exemplos de execução, incluindo visualizações e relatórios.

---

## Estrutura do Projeto

Abaixo está a organização do repositório:

```plaintext
analiserecife/
├── app/                  # Dashboard interativo
│   └── dashboard.py
├── data/                 # Dados do projeto
│   ├── raw/              # Dados brutos
│   └── processed/        # Dados processados
├── notebooks/            # Notebooks para análise
│   ├── EDA.ipynb         # Análise exploratória
│   └── Previsao_ARIMA.ipynb
├── reports/              # Relatórios e gráficos
│   ├── graficos/
│   └── insights/
├── src/                  # Código fonte
│   ├── preprocessing.py  # Funções de pré-processamento
│   ├── arima_model.py    # Modelo ARIMA
│   ├── ml_models.py      # Modelo Random Forest
│   └── visualizations.py # Funções para visualizações
├── README.md             # Documentação do projeto
├── requirements.txt      # Dependências do projeto
└── .gitignore            # Arquivos ignorados pelo Git
import pandas as pd

def limpar_dados(df):
    """
    Limpa o DataFrame, removendo valores nulos e convertendo a coluna 'data' para datetime.
    """
    df = df.dropna()
    if 'data' in df.columns:
        df['data'] = pd.to_datetime(df['data'])
    return df
from statsmodels.tsa.arima.model import ARIMA

def rodar_arima(serie, ordem=(1, 1, 1)):
    """
    Ajusta um modelo ARIMA em uma série temporal.
    """
    modelo = ARIMA(serie, order=ordem)
    resultado = modelo.fit()
    return resultado
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

def modelo_random_forest(X, y):
    """
    Ajusta um modelo Random Forest para classificação.
    """
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    return classification_report(y_test, y_pred)
